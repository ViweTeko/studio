// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for analyzing athlete performance based on race data and athlete profiles.
 *
 * The flow uses AI to provide insights and predictions for training adjustments and performance improvement.
 *
 * @remarks
 *   - analyzePerformance - The main function that triggers the performance analysis flow.
 *   - AnalyzePerformanceInput - The input type for the analyzePerformance function, including race data and athlete profile information.
 *   - AnalyzePerformanceOutput - The output type for the analyzePerformance function, providing AI-driven insights and predictions.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

/**
 * Defines the input schema for the analyzePerformance flow.
 */
const AnalyzePerformanceInputSchema = z.object({
  raceData: z
    .string()
    .describe(
      'Historical race data, including date, location, event, and athlete performance metrics (e.g., time, speed, ranking).'
    ),
  athleteProfile: z
    .string()
    .describe(
      'Athlete profile information, including name, age, gender, training history, personal bests, and any relevant physical characteristics.'
    ),
});

/**
 * Defines the output schema for the analyzePerformance flow.
 */
const AnalyzePerformanceOutputSchema = z.object({
  performanceInsights: z
    .string()
    .describe(
      'AI-driven insights into the athlete performance, including strengths, weaknesses, and areas for improvement.'
    ),
  trainingRecommendations: z
    .string()
    .describe(
      'Specific training adjustments recommended based on the analysis of race data and athlete profile, such as changes in training intensity, volume, or focus.'
    ),
  performancePredictions: z
    .string()
    .describe(
      'Predictions about the athlete future performance based on historical data and current training regimen.'
    ),
});

export type AnalyzePerformanceInput = z.infer<typeof AnalyzePerformanceInputSchema>;
export type AnalyzePerformanceOutput = z.infer<typeof AnalyzePerformanceOutputSchema>;

/**
 * Main function to trigger the analyzePerformance flow.
 * @param input - The input data for performance analysis, conforming to AnalyzePerformanceInputSchema.
 * @returns A promise that resolves to the analysis results, conforming to AnalyzePerformanceOutputSchema.
 */
export async function analyzePerformance(input: AnalyzePerformanceInput): Promise<AnalyzePerformanceOutput> {
  return analyzePerformanceFlow(input);
}

const analyzePerformancePrompt = ai.definePrompt({
  name: 'analyzePerformancePrompt',
  input: {
    schema: z.object({
      raceData: z
        .string()
        .describe(
          'Historical race data, including date, location, event, and athlete performance metrics (e.g., time, speed, ranking).'
        ),
      athleteProfile: z
        .string()
        .describe(
          'Athlete profile information, including name, age, gender, training history, personal bests, and any relevant physical characteristics.'
        ),
    }),
  },
  output: {
    schema: z.object({
      performanceInsights: z
        .string()
        .describe(
          'AI-driven insights into the athlete performance, including strengths, weaknesses, and areas for improvement.'
        ),
      trainingRecommendations: z
        .string()
        .describe(
          'Specific training adjustments recommended based on the analysis of race data and athlete profile, such as changes in training intensity, volume, or focus.'
        ),
      performancePredictions: z
        .string()
        .describe(
          'Predictions about the athlete future performance based on historical data and current training regimen.'
        ),
    }),
  },
  prompt: `Analyze the athlete's performance based on the provided race data and athlete profile. Provide insights, training recommendations, and performance predictions.

Race Data: {{{raceData}}}
Athlete Profile: {{{athleteProfile}}}

Provide the performance insights, training recommendations, and performance predictions based on your analysis.`, // Corrected the prompt
});

const analyzePerformanceFlow = ai.defineFlow<
  typeof AnalyzePerformanceInputSchema,
  typeof AnalyzePerformanceOutputSchema
>(
  {
    name: 'analyzePerformanceFlow',
    inputSchema: AnalyzePerformanceInputSchema,
    outputSchema: AnalyzePerformanceOutputSchema,
  },
  async input => {
    const {output} = await analyzePerformancePrompt(input);
    return output!;
  }
);
